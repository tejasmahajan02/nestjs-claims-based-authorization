generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int        @id @default(autoincrement())
  email    String     @unique
  name     String?
  UserRole UserRole[]

  tenantId Int?
  tenant   Tenant?    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("user")
}

model Tenant {
  id   Int    @id @default(autoincrement())
  name String
  user User[]
  role Role[]
  permission Permission[]

  @@map("tenant")
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String
  RolePermission RolePermission[]
  UserRole       UserRole[]

  tenantId Int?
  tenant   Tenant?    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("role")
}

model Permission {
  id             Int              @id @default(autoincrement())
  scope          String           @unique
  description    String
  RolePermission RolePermission[]

  tenantId Int?
  tenant   Tenant?    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("permission")
}

model RolePermission {
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId]) // Composite PK
  @@map("role_permission")
}

model UserRole {
  roleId Int
  userId Int

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([roleId, userId]) // Composite PK
  @@map("user_role")
}
